task 1 
Perform the following arithmetic operations:
1. X * Y
2. X / Y
3. X * Y / Z



.MODEL SMALL
.STACK 100H
.DATA

.CODE
MAIN PROC
    ; Initialize DS
    MOV AX, @DATA
    MOV DS, AX

    ; X * Y (6 * 3)
    MOV AX, 6         ; Load 6 into AX (X)
    MOV BX, 3         ; Load 3 into BX (Y)
    MUL BX            ; AX = AX * BX (6 * 3)

    ; Store result of X * Y temporarily in DX:AX (DX = 0 since MUL modifies DX for overflow)
    MOV DX, AX

    ; X / Y (6 / 3)
    MOV AX, 6         ; Reload 6 into AX
    MOV BX, 3         ; Reload 3 into BX
    DIV BX            ; AX = AX / BX (6 / 3)

    ; X * Y / Z ((6 * 3) / 2)
    MOV AX, DX        ; Load result of X * Y into AX
    MOV BX, 2         ; Load 2 into BX (Z)
    DIV BX            ; AX = AX / BX ((6 * 3) / 2)

    ; Exit to DOS
    MOV AX, 4C00H
    INT 21H
MAIN ENDP
END MAIN








***task 2 ***

Perform the following arithmetic operations:
(A + B) * (C - D) / E

.MODEL SMALL
.STACK 100H
.DATA

.CODE
MAIN PROC
    ; Initialize DS
    MOV AX, @DATA
    MOV DS, AX

    ; (A + B) (5 + 3)
    MOV AX, 5         ; Load 5 into AX (A)
    ADD AX, 3         ; AX = AX + 3 (A + B)

    ; (C - D) (10 - 2)
    MOV BX, 10        ; Load 10 into BX (C)
    SUB BX, 2         ; BX = BX - 2 (C - D)

    ; (A + B) * (C - D)
    MUL BX            ; AX = AX * BX ((A + B) * (C - D))

    ; ((A + B) * (C - D)) / E
    MOV BX, 4         ; Load 4 into BX (E)
    DIV BX            ; AX = AX / BX (((A + B) * (C - D)) / E)

    ; Exit to DOS
    MOV AX, 4C00H
    INT 21H
MAIN ENDP
END MAIN




task 3 

*** Perform the following arithmetic operation:
(1 + 2) * (3 – 1) / 5 + 3 + 2 – (1 * 2) *** 


.MODEL SMALL
.STACK 100H
.DATA

.CODE
MAIN PROC
    ; Initialize DS
    MOV AX, @DATA
    MOV DS, AX

    ; (1 + 2)
    MOV AX, 1         ; Load 1 into AX
    ADD AX, 2         ; AX = AX + 2 (1 + 2)

    ; (3 - 1)
    MOV BX, 3         ; Load 3 into BX
    SUB BX, 1         ; BX = BX - 1 (3 - 1)

    ; (1 + 2) * (3 - 1)
    MUL BX            ; AX = AX * BX ((1 + 2) * (3 - 1))

    ; ((1 + 2) * (3 - 1)) / 5
    MOV BX, 5         ; Load 5 into BX
    DIV BX            ; AX = AX / BX (((1 + 2) * (3 - 1)) / 5)

    ; Add 3 + 2
    ADD AX, 3         ; AX = AX + 3
    ADD AX, 2         ; AX = AX + 2

    ; Subtract (1 * 2)
    MOV BX, 1         ; Load 1 into BX
    MOV CX, 2         ; Load 2 into CX
    MUL CX            ; BX = 1 * 2
    SUB AX, BX        ; AX = AX - (1 * 2)

    ; Exit to DOS
    MOV AX, 4C00H
    INT 21H
MAIN ENDP
END MAIN




